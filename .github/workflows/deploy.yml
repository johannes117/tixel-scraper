name: Deploy Tixel Scraper Lambda

on:
  # Disabled for now - uncomment to re-enable
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  workflow_dispatch: # Allow manual triggering only

env:
  AWS_REGION: ap-southeast-2
  STACK_NAME: tixel-scraper

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Lambda Function

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r lambda_requirements.txt
          pip install python-dotenv

      - name: Create test .env file
        run: |
          echo "RESEND_API_KEY=test-key" > .env
          echo "FROM_ADDRESS=test@example.com" >> .env
          echo "TO_ADDRESSES=recipient@example.com" >> .env
          echo "TIXEL_URL=https://tixel.com/test" >> .env

      - name: Run local tests
        run: |
          python test_lambda_local.py

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Create deployment package
        run: |
          # Create temporary directory
          mkdir -p deployment
          cp lambda_function.py deployment/
          cp lambda_requirements.txt deployment/requirements.txt

          # Install dependencies in deployment directory
          cd deployment
          pip install -r requirements.txt -t .

          # Create zip package
          zip -r ../lambda-deployment-package.zip . -x "*.pyc" "__pycache__/*"
          cd ..

      - name: Upload to S3
        id: upload
        run: |
          # Create unique bucket name
          BUCKET_NAME="tixel-scraper-lambda-$(date +%s)"
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT

          # Create bucket and upload
          aws s3 mb "s3://$BUCKET_NAME" --region ${{ env.AWS_REGION }}
          aws s3 cp lambda-deployment-package.zip "s3://$BUCKET_NAME/"

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation-template.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              ResendApiKey="${{ secrets.RESEND_API_KEY }}" \
              FromAddress="${{ secrets.FROM_ADDRESS }}" \
              ToAddresses="${{ secrets.TO_ADDRESSES }}" \
              TixelUrl="${{ secrets.TIXEL_URL }}" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Update Lambda function code
        run: |
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionName'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})
            
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --s3-bucket "${{ steps.upload.outputs.BUCKET_NAME }}" \
            --s3-key "lambda-deployment-package.zip" \
            --region ${{ env.AWS_REGION }}

      - name: Clean up S3 bucket
        if: always()
        run: |
          if [ -n "${{ steps.upload.outputs.BUCKET_NAME }}" ]; then
            aws s3 rm "s3://${{ steps.upload.outputs.BUCKET_NAME }}" --recursive || true
            aws s3 rb "s3://${{ steps.upload.outputs.BUCKET_NAME }}" || true
          fi

      - name: Deployment summary
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üîó Stack: ${{ env.STACK_NAME }}"
          echo "üåè Region: ${{ env.AWS_REGION }}"
          echo "üìä You can monitor the function in the AWS Console"
